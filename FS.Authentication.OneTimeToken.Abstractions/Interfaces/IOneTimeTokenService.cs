using FS.Authentication.OneTimeToken.Abstractions.Models;
using System;
using System.Collections.Generic;
using System.Security.Claims;

namespace FS.Authentication.OneTimeToken.Abstractions.Interfaces
{
    /// <summary>
    /// Interface for one time token authentication service.
    /// </summary>
    /// <autogeneratedoc />
    public interface IOneTimeTokenService
    {
        /// <summary>
        /// Creates a one-time token.
        /// </summary>
        string CreateToken();

        /// <summary>
        /// Creates a one-time token.
        /// </summary>
        /// <param name="expiresIn">Token lifetime.</param>
        string CreateToken(TimeSpan expiresIn);

        /// <summary>
        /// Creates a one-time token.
        /// </summary>
        /// <param name="claims">Claims added to authentication result.</param>
        string CreateToken(IEnumerable<Claim> claims);

        /// <summary>
        /// Creates a one-time token.
        /// </summary>
        /// <param name="expiresIn">The expires in.</param>
        /// <param name="claims">Claims added to authentication result.</param>
        string CreateToken(TimeSpan expiresIn, IEnumerable<Claim> claims);

        /// <inheritdoc cref="CreateToken(IEnumerable{Claim})" />
        string CreateToken(params Claim[] claims);

        /// <inheritdoc cref="CreateToken(TimeSpan, IEnumerable{Claim})" />
        string CreateToken(TimeSpan expiresIn, params Claim[] claims);

        /// <summary>
        /// Creates a one-time token.
        /// </summary>
        /// <param name="roles">Comma delimited list of roles that are allowed to access the resource.</param>
        [Obsolete(Messages.CREATE_TOKEN_WITH_CLAIMS)]
        string CreateToken(params string[] roles);

        /// <summary>
        /// Creates a one-time token.
        /// </summary>
        /// <param name="expiresIn">Token lifetime.</param>
        /// <param name="roles">Comma delimited list of roles that are allowed to access the resource.</param>
        [Obsolete(Messages.CREATE_TOKEN_WITH_CLAIMS)]
        string CreateToken(TimeSpan expiresIn, params string[] roles);

        /// <summary>
        /// Validates the token.
        /// </summary>
        /// <param name="token">The token.</param>
        TokenValidationResult ValidateToken(string token);
    }

    internal class Messages
    {
        internal const string CREATE_TOKEN_WITH_CLAIMS = "Use CreateToken with claims. Claim of type 'Role' can be crated with new Claim(ClaimTypes.Role, \"role-name\").";
    }
}