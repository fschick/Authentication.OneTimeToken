using FS.Authentication.OneTimeToken.Abstractions.Interfaces;
using FS.Authentication.OneTimeToken.Models;
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Primitives;
using System.Linq;
using System.Security.Claims;
using System.Text.Encodings.Web;
using System.Threading.Tasks;

namespace FS.Authentication.OneTimeToken.Services;

/// <summary>
/// One time access token verification handler.
/// </summary>
public class OneTimeTokenHandler : AuthenticationHandler<OneTimeTokenOptions>
{
    private readonly IOneTimeTokenService _oneTimeTokenService;

    /// <summary>
    /// Initializes a new instance of the <see cref="OneTimeTokenHandler"/> class.
    /// </summary>
    /// <param name="options">Options for controlling the operation.</param>
    /// <param name="logger">The logger.</param>
    /// <param name="encoder">The encoder.</param>
    /// <param name="clock">The clock.</param>
    /// <param name="oneTimeTokenService">The one time token service.</param>
    /// <autogeneratedoc />
    public OneTimeTokenHandler(IOptionsMonitor<OneTimeTokenOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock, IOneTimeTokenService oneTimeTokenService)
        : base(options, logger, encoder, clock)
        => _oneTimeTokenService = oneTimeTokenService;

    /// <inheritdoc />
    protected override Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        if (!Request.Headers.TryGetValue(OptionsMonitor.CurrentValue.AuthorizationHeaderName, out var tokenHeaderValues))
            tokenHeaderValues = new StringValues();

        var authorizationHeaderPrefix = $"{OptionsMonitor.CurrentValue.AuthorizationHeaderPrefix} ";
        var tokenFromHeader = tokenHeaderValues
            .FirstOrDefault(value => value.StartsWith(authorizationHeaderPrefix))?
            .Remove(0, authorizationHeaderPrefix.Length);

        var tokenFromQueryParam = Request.Query[OptionsMonitor.CurrentValue.AuthorizationQueryParamName].FirstOrDefault();

        var providedToken = tokenFromHeader ?? tokenFromQueryParam ?? string.Empty;

        var tokenValidationResult = _oneTimeTokenService.ValidateToken(providedToken);
        if (!tokenValidationResult.IsValid)
            return Task.FromResult(AuthenticateResult.NoResult());

        var claims = tokenValidationResult.Claims.ToList();

        if (claims.All(claim => claim.Type != ClaimTypes.Name))
            claims.Add(new Claim(ClaimTypes.Name, OptionsMonitor.CurrentValue.NameIdentifier));

        if (claims.All(claim => claim.Type != ClaimTypes.NameIdentifier))
            claims.Add(new Claim(ClaimTypes.NameIdentifier, OptionsMonitor.CurrentValue.NameIdentifier));

        var identity = new ClaimsIdentity(claims, Scheme.Name);
        var principal = new ClaimsPrincipal(identity);
        var ticket = new AuthenticationTicket(principal, Scheme.Name);
        return Task.FromResult(AuthenticateResult.Success(ticket));
    }
}